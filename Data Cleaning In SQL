Select * 
from Project2.dbo.NashvilleHousing

-- Standarize Date Format

select SaleDate, convert(date, SaleDate) as SaleDateNew
from Project2.dbo.NashvilleHousing

Alter table dbo.NashvilleHousing 
add SaleDateNew Date;

update NashvilleHousing
set SaleDateNew = CONVERT(date, SaleDate)


-- Populate Property Address Data
select *
from Project2.dbo.NashvilleHousing
where PropertyAddress is null
order by ParcelID


select a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
from Project2.dbo.NashvilleHousing a
join Project2.dbo.NashvilleHousing b
on a.ParcelID = b.ParcelID
And a.[UniqueID ] <> b.[UniqueID ]
where a.PropertyAddress is null


Update a
set PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
from Project2.dbo.NashvilleHousing a
join Project2.dbo.NashvilleHousing b
on a.ParcelID = b.ParcelID
And a.[UniqueID ] <> b.[UniqueID ]
where a.PropertyAddress is null 


-- Breaking out Adress into Individual columns (Adress, city, State)

select PropertyAddress
from Project2.dbo.NashvilleHousing


select 
SUBSTRING (PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1) as Address,
SUBSTRING (PropertyAddress, CHARINDEX(',',PropertyAddress) +1 , len(PropertyAddress)) as Address
from dbo.NashvilleHousing

-- Adding the Address columns after spliting them

Alter table dbo.NashvilleHousing 
add PropertySplitAddress Nvarchar(255);

update NashvilleHousing
set PropertySplitAddress = SUBSTRING (PropertyAddress, 1, CHARINDEX(',',PropertyAddress) -1)


Alter table dbo.NashvilleHousing 
add PropertySplitCity Nvarchar(255);

update NashvilleHousing
set PropertySplitCity = SUBSTRING (PropertyAddress, CHARINDEX(',',PropertyAddress) +1 , len(PropertyAddress))


select *
From dbo.NashvilleHousing

-- using Parsename instead of substring 
select 
Parsename(Replace(OwnerAddress, ',' ,'.'), 3),
Parsename(Replace(OwnerAddress, ',' ,'.'), 2),
Parsename(Replace(OwnerAddress, ',' ,'.'), 1)
From dbo.NashvilleHousing


-- Adding the Owner Address columns after spliting them

Alter table dbo.NashvilleHousing 
add OwnerSplitAddress Nvarchar(255);

update NashvilleHousing
set OwnerSplitAddress = Parsename(Replace(OwnerAddress, ',' ,'.'), 3)

Alter table dbo.NashvilleHousing 
add OwnerSplitCity Nvarchar(255);

update NashvilleHousing
set OwnerSplitCity = Parsename(Replace(OwnerAddress, ',' ,'.'), 2)


Alter table dbo.NashvilleHousing 
add OwnerSplitState Nvarchar(255);

update NashvilleHousing
set OwnerSplitState = Parsename(Replace(OwnerAddress, ',' ,'.'), 1)

select * 
from dbo.NashvilleHousing


-- changing Y and N to Yes and No in "Sold as Vacant" field

select Distinct(SoldAsVacant), count(SoldAsVacant)
from dbo.NashvilleHousing
group by SoldAsVacant
order by 2


select SoldAsVacant,
Case when SoldAsVacant = 'Y' then 'Yes'
when SoldAsVacant = 'N' then 'No'
else SoldAsVacant
end
from dbo.NashvilleHousing


update NashvilleHousing
set SoldAsVacant = Case when SoldAsVacant = 'Y' then 'Yes'
when SoldAsVacant = 'N' then 'No'
else SoldAsVacant
end



-- Removing Duplicates

with RowNumCTE as(
Select *,
ROW_NUMBER() over (
partition by ParcelID,
PropertyAddress,
SalePrice,
SaleDate,
LegalReference
order by UniqueID
) row_num

from dbo.NashvilleHousing
)
Delete 
from RowNumCTE 
where row_num > 1

-- checking for any more Duplicates

with RowNumCTE as(
Select *,
ROW_NUMBER() over (
partition by ParcelID,
PropertyAddress,
SalePrice,
SaleDate,
LegalReference
order by UniqueID
) row_num

from dbo.NashvilleHousing
)
select * 
from RowNumCTE 
where row_num > 1
order by PropertyAddress 



-- Delete Unused Columns 

Select *
from dbo.NashvilleHousing


Alter table dbo.NashvilleHousing
Drop column OwnerAddress, TaxDistrict, PropertyAddress, SaleDate
